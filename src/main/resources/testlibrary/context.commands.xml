<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="CommandViewer.xsl"?>
<library>
	<command name="addListToList"
		class="org.finra.jtaf.core.commands.context.AddListToListCmd">
		<usage>
			Gets a list from context and adds its elements to another list stored in the context
		</usage>
		<requriedParameters>
			<string name="tolist">Name of the list in the context to which addlist's elements are added</string>
			<string name="addlist">Name of the list in the context whose elements will be added to tolist</string>
		</requriedParameters>
		<optionalParameters>
			<integer name="index">The index of the tolist at which the elements of the addlist should get added (default: size of tolist)</integer>
		</optionalParameters>
		<produces>
			<list name="tolist">The list with all of the elements in it. The name will be the value of tolist</list>
		</produces>
	</command>
	<command name="addObjectToList"
		class="org.finra.jtaf.core.commands.context.AddObjectToListCmd">
		<usage>
			Gets an object from context and adds that object into a list in the context
		</usage>
		<requriedParameters>
			<string name="list">Name of list in context to which object will get added</string>
			<string name="object">Name of the object in context to add to list</string>
		</requriedParameters>
		<optionalParameters>
			<integer name="index">The index of the list at which object should get added (default: size of list)</integer>
		</optionalParameters>
		<produces>
			<list name="list">The list with the object in it. The name will be the value of list</list>
		</produces>
	</command>
	<command name="putObjectInMap"
		class="org.finra.jtaf.core.commands.context.PutObjectInMapCmd">
		<usage>
			Gets an object from context and puts it into a map in context
		</usage>
		<requriedParameters>
			<string name="map">Name of map in context</string>
			<string name="object">Name of the object in context to put into map</string>
			<object name="key">The key to use for the object's new map entry</object>
		</requriedParameters>
		<produces>
			<map name="map">The map with the object put in it. The name will be the value of map</map>
		</produces>
	</command>
	<command name="removeObjectFromContext"
		class="org.finra.jtaf.core.commands.context.RemoveObjectFromContextCmd">
		<usage>
			Removes an object from context by replacing it with null
		</usage>
		<requriedParameters>
			<string name="object">Name of the object in context to remove</string>
		</requriedParameters>
		<produces>
			<object name="object">Null value stored as the value of object in the context</object>
		</produces>
	</command>
	<command name="storeObjectFromList"
		class="org.finra.jtaf.core.commands.context.StoreObjectFromListCmd">
		<usage>
			Gets an object at a specified index from a list in context and stores that object into context
		</usage>
		<requriedParameters>
			<string name="list">Name of list in context to get object from</string>
			<string name="object">Name of context key for which the object will get stored</string>
		</requriedParameters>
		<optionalParameters>
			<integer name="index">The index of the list to get (default: size of list)</integer>
		</optionalParameters>
		<produces>
			<object name="object">The object pulled from the list will get pushed into the context with the name as the value of objectKey</object>
		</produces>
	</command>
	<command name="storeObjectFromMap"
		class="org.finra.jtaf.core.commands.context.StoreObjectFromMapCmd">
		<usage>
			Gets an object from a map in context and stores that object into context
		</usage>
		<requriedParameters>
			<string name="map">Name of map in context to get object from</string>
			<string name="objectKey">Name of context key for which the object will get stored</string>
			<object name="mapKey">The key of the object to grab in the map</object>
		</requriedParameters>
		<produces>
			<object name="object">The object pulled from the map is pushed to the context with its name as objectKey</object>
		</produces>
	</command>
	<command name="storeObjectInContext"
		class="org.finra.jtaf.core.commands.context.StoreObjectInContextCmd">
		<usage>
			Gets an object from context and stores that object into another attribute
		</usage>
		<requriedParameters>
			<string name="loadKey">Context key from which to get the object</string>
			<string name="storeKey">Context key to which the object should be stored</string>
		</requriedParameters>
		<produces>
			<object name="storedObject">Stores the object into the storeKey specified above</object>
		</produces>
	</command>
	<command name="storeObjectAsString"
		class="org.finra.jtaf.core.commands.context.StoreObjectAsStringCmd">
		<usage>
			Gets an object from context and restores that object into context with its .toString() value
		</usage>
		<requriedParameters>
			<string name="key">Name of the key whose object will be restored in the context as a String</string>
		</requriedParameters>
		<produces>
			<string name="string">The String value of the object will be restored for the key</string>
		</produces>
	</command>
	<command name="verifyObjectInContext"
		class="org.finra.jtaf.core.commands.context.VerifyObjectInContextCmd">
		<usage>Verifies an object in context against another according to the expected object's type (ie: if map, then compare size and all keys/values)</usage>
		<requriedParameters>
			<string name="actualKey">Context key of the actual object to compare</string>
			<string name="expectedKey">Context key of the expected object to compare</string>
		</requriedParameters>
		<optionalParameters>
			<string name="title">The display name of the object being verified (for error reporting purposes)</string>
			<boolean name="failOnNotEqual">True by default. When the actual object does not equal the expected object, an AssertionFailedError will be thrown</boolean>
		</optionalParameters>
		<produces>
			<list name="errorList">A list of error messages received when trying to compare equality of actual and expected</list>
		</produces>
	</command>
	<command name="storeDefaultObject"
		class="org.finra.jtaf.core.commands.context.StoreDefaultObjectCmd">
		<usage>
			Stores a default value into context unless the object already exists in context
		</usage>
		<requriedParameters>
			<string name="contextKey">Key to store the default object if not yet stored in the context</string>
		</requriedParameters>
		<optionalParameters>
		    <string name="defaultKey">If specified, the object in the context pulled with this value as its key will become the default value</string>
		    <string name="default">The default value to use if no defaultKey specified. Note that this can be any sort of variable in the test script with name='default' (string, list, map, integer, etc.)</string>
		</optionalParameters>
		<produces>
			<object name="object">Stores it into the object name specified above</object>
		</produces>
	</command>
	
</library>
